---
title: "Temporal forecast reconciliation"
author: "Daniele Girolimetto"
date: "`r Sys.Date()`"
package: FoReco
output: rmarkdown::html_vignette
bibliography: references.bib
csl: apa.csl
---

```{r}
#| label: knitr
#| include: false
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

# Introduction

In this vignette, we explore the process of temporal reconciliation using the `FoReco` package, with a focus on the Capital Country monthly time series (`ADB`) from the `vndata` dataset [@Wickramasuriya2019]. Temporal reconciliation is a method used to ensure that forecasts are coherent across different time periods, providing a consistent view from high-frequency (e.g., monthly) to aggregated levels (e.g., yearly). We will first obtain base forecasts using an ETS model with log transformation and then proceed with several reconciliation methods: bottom-up, top-down, and optimal combination. Each method has its own strengths and practical challenges, such as ensuring non-negativity and incorporating a priori constraints.


## Packages

First, we load the necessary packages. 

```{r setup, warning = FALSE, message = FALSE}
library(FoReco)   # -> To perform reconciliation
library(forecast)  # -> To obtain base forecasts
```

#  Capital Country monthly time series

In the temporal framework, we are working with a single series. In particular for this vignette we consider the Capital Country monthly time series (`ADB`) from the `vndata` dataset [@Wickramasuriya2019]. See the [dataset vignette](Dataset-vndata-and-itagdp.html) for more details.

```{r}
#| label: data-vn
data(vndata)      # dataset
y <- vndata[, "GBDOth"]
te_set <- tetools(12)$set
m <- max(te_set)
```

## Base Forecast

To obtained the base forecasts, we fit an ETS model with log transformation. We obtain twelve-, six-, four-, three-, two-, and one-step-ahead base forecasts from the monthly data and the aggregation over 2, 3, 4, 6, and 12 months.

```{r}
#| label: base-vn
data_k <- aggts(y, te_set)
model <- setNames(vector(mode='list', length=length(te_set)), paste0("k-", te_set))
fc_obj <- setNames(vector(mode='list', length=length(te_set)), paste0("k-", te_set))

# ETS model with log transformation
ets_log <- function(x, ...){
  x[x==0] <- min(x[x!=0])/2
  ets(x, lambda = 0, ...)
}

for(k in te_set){
  model[[paste0("k-", k)]] <- ets_log(data_k[[paste0("k-", k)]])
  fc_obj[[paste0("k-", k)]] <- forecast(model[[paste0("k-", k)]], h = m/k)
}
```

We extract the point forecasts and residuals from the fitted models.

```{r}
#| label: point-vn
# Point forecasts
base <- lapply(fc_obj, function(x) x$mean)
str(base, give.attr = FALSE)
# Residuals
res <- lapply(fc_obj, residuals, type = "response")
str(res, give.attr = FALSE)
```

## Point Reconciliation

Bottom-up reconciliation [@Dunn1976-kv] aggregates the high-frequency forecasts from the monthly level to higher temporal levels [@Girolimetto2023-jm].

```{r}
#| label: bu-vn
fc_bts <- base$`k-1`
rf_bu <- tebu(fc_bts, agg_order = m)
str(rf_bu, give.attr = FALSE)
```

To obtain a list of forecasts at different orders of aggregation, we can use the `FoReco2matrix` function.

```{r}
#| label: extract-vn
str(FoReco2matrix(rf_bu), give.attr=FALSE)
```

In top-down reconciliation for hierarchical time series, the forecast for the annual series ($k = 12$) is distributed proportionally to ensure the top-level value stays the same and all bottom-level forecasts are non-negative [@Gross1990-uf]. 

```{r}
#| label: td-vn
y_mat <- matrix(data_k$`k-1`, ncol = m, byrow = TRUE)
x12 <- data_k$`k-12`
fc_x12 <- base$`k-12`

# Average historical proportions - Gross-Sohl method A
p_gsa <- colMeans(apply(y_mat, 2, function(x) x/x12), na.rm = TRUE)
rf_td_gsa <- tetd(fc_x12, agg_order = m, weights = p_gsa)
str(rf_td_gsa, give.attr = FALSE)

# Proportions of the historical averages - Gross-Sohl method F
p_gsf <- colMeans(y_mat)/mean(x12)
rf_td_gsf <- tetd(fc_x12, agg_order = m, weights = p_gsf)
str(rf_td_gsf, give.attr = FALSE)
```

To perform temporal reconciliation with `FoReco` using the base forecasts at any temporal aggregation order, it is necessary to arrange base forecasts (and residuals) in vector form.
```{r}
#| label: vec
base_vec <- unlist(base, use.names = FALSE)
res_vec <- unlist(res, use.names = FALSE)
```

The level conditional coherent reconciliation (LCC) is a generalization of the original proposal by @Hollyman2021-zq and @DiFonzo2024-ijf to include the temporal framework.

```{r}
#| label: lcc-vn
rf_lcc <- telcc(base = base_vec, agg_order = m,
                res = res_vec, comb = "wlsv")
str(rf_lcc, give.attr = FALSE)
```


Finally we can obtained the optimal (in least squares sense) combination temporal reconciled forecast [@Athanasopoulos2017-zh].

```{r}
#| label: opt-vn
rf_opt <- terec(base = base_vec, agg_order = m,
                res = res_vec, comb = "sar1")
str(rf_opt, give.attr = FALSE)
```

The following table shows some options for the optimal combination temporal reconciliation function `terec()`. 

<style type="text/css">
.tg .tr-bottom{border:hidden;border-bottom:1px solid black;}
.tg .tg-center{text-align:center;}
.tg .tg-right{text-align:right;}
.tg .tg-left{text-align:left;}
.tg .tg-rvxo{font-size:small;font-style:italic;text-align:left;}
.tg a{color:inherit;text-decoration:none;}
</style>

<table class="tg" style="table-layout:fixed;width:75%;">
<thead>
  <tr style="border: hidden;border-top-style:solid;border-bottom-style:solid;">
    <th class="tg-center">Projection approach</th>
    <th class="tg-center">Structural approach</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td class="tg-center" colspan = 2 style="font-size:small;font-style:italic;">Standard</td>
  </tr>
  <tr class="tr-bottom">
    <td class="tg-center" style="border-right-style:double;">`approach="proj"`
    $$
    \tilde{\mathbf{y}}_h = \left[\mathbf{I}_n - \mathbf{W}\mathbf{C}'(\mathbf{C}\mathbf{W}\mathbf{C}')^{-1}\mathbf{C}\right] \hat{\mathbf{y}}_h
    $$
    </td>
    <td class="tg-center">`approach="strc"` 
    $$
    \tilde{\mathbf{y}}_h = \mathbf{S}(\mathbf{S}'\mathbf{W}^{-1}\mathbf{S})^{-1}\mathbf{S}'\mathbf{W}^{-1} \hat{\mathbf{y}}_h
    $$
</td>
  </tr>
  <tr>
    <td class="tg-center" colspan = 2 style="font-size:small;font-style:italic;border-top-style:solid;">Non-negative forecast reconciliation (osqp)</td>
  </tr>
  <tr class="tr-bottom">
    <td class="tg-center" style="border-right-style:double;">`approach="proj"` + `nn="osqp"` </br></br> or </br> `nn="proj_osqp"`</td>
    <td class="tg-center">`approach="strc"` + `nn="osqp"` </br> or </br>  `nn="strc_osqp"`</td>
  </tr>
  <tr>
    <td class="tg-center" colspan = 2 style="font-size:small;font-style:italic;border-top-style:solid;">Non-negative forecast reconciliation (sntz)</td>
  </tr>
  <tr class="tr-bottom">
    <td class="tg-center" style="border-right-style:double;">not supported*</td>
    <td class="tg-center">`nn="sntz"`</td>
  </tr>
  <tr>
    <td class="tg-center" colspan = 2 style="font-size:small;font-style:italic;border-top-style:solid;">Immutable forecast reconciliation</td>
  </tr>
  <tr class="tr-bottom">
    <td class="tg-center" style="border-right-style:double;">supported</td>
    <td class="tg-center">supported</td>
  </tr>
</tbody>
  <tfoot style="border:hidden;border-top:1px solid black;font-size:small;"><tr><td colspan="2">*&nbsp;If the cross-sectional zero-constraints matrix is $\mathbf{C} = [\mathbf{I}\quad-\mathbf{A}]$, then `nn="sntz"` is supported.</td></tr></tfoot>
</table>

## Practical challenges

### Non negativity issues

It is not always true that reconciled forecasts will remain non-negative even if the base forecasts are non-negative. For example, consider the case of an shrinkage covariance matrix (`"shr"`).

```{r}
#| label: nn-opt-vn
rf_opt_shr <- terec(base = base_vec, agg_order = m,
                    res = res_vec, comb = "shr")
recoinfo(rf_opt_shr)
```

To address this issue, we can use two approaches:

- State-of-the-art numerical optimization procedure, **osqp** [@Stellato2020-jd].

```{r}
#| label: osqp-opt-vn
rf_osqp <- terec(base = base_vec, agg_order = m,
                res = res_vec, comb = "shr", nn = "osqp")
tmp <- recoinfo(rf_osqp)
tmp$info # OSQP information matrix 
```

- Simple heuristic strategy: set-negative-to-zero, **sntz** [@Di_Fonzo2023-ae].

```{r}
#| label: sntz-opt-vn
rf_sntz <- terec(base = base_vec, agg_order = m,
                res = res_vec, comb = "shr", nn = "sntz")
recoinfo(rf_sntz)
```

### A priori constrained (immutable) forecasts

Sometimes we may wish to incorporate a priori knowledge during the reconciliation process [@Zhang2023-yj] in order to improve the accuracy of the reconciled forecasts. For example, suppose we want to fix the forecasts of the annual level at the base forecasts values.

```{r}
#| label: imm-vn
rf_imm <- terec(base = base_vec, agg_order = m,
                res = res_vec, comb = "sar1", immutable = rbind(c(12,1)))
str(rf_imm, give.attr = FALSE)
```

```{r}
#| label: check_imm-vn
rf_imm[1] - base_vec[1]
```

### Exploring a subset of temporal aggregation orders

Our approaches so far have involved considering all factors of $m$ as potential aggregation orders. Nevertheless, it is worth noting that we could also focus only on a given subset of these factors. For example, we could be interested only on monthly, quarterly and annual forecasts.

```{r}
#| label: subset-vn
te_subset <- c(12, 3, 1)
base_vec2 <- unlist(base[paste0("k-", te_subset)], use.names = FALSE)
res_vec2 <- unlist(res[paste0("k-", te_subset)], use.names = FALSE)
rf_sub <- terec(base = base_vec2, agg_order = te_subset,
                res = res_vec2, comb = "sar1")
str(rf_sub, give.attr = FALSE)
```

## Probabilistic Reconciliation

Following @Panagiotelis2023-se and @Girolimetto2023-jm, the reconciliation of probabilistic forecasts is a two-step process: first, we sample from an incoherent distributio, and then we reconcile each sample.

We can use a non-parametric method, the joint block bootstrap to simulate $B$ samples and then reconciled them.
```{r}
#| label: tejb-vn-old
#| include: false
#| eval: false
# Base forecasts' sample:
# we simulate from the base models by sampling errors 
# while keeping the cross-sectional dimension fixed.
B <- 100
base_tejb <- teboot(model, B, m)$sample
dim(base_tejb)
# Reconciled forecasts' sample: 
# we reconcile each member of a sample from the incoherent distribution.
reco_tejb <- t(apply(base_tejb, 1, terec, agg_order = m, res = res_vec, nn = "sntz",
                   comb = "sar1"))
str(reco_tejb, give.attr = FALSE)
```
```{r}
#| label: tejb-vn
# Base forecasts' sample:
# we simulate from the base models by sampling errors 
# while keeping the cross-sectional dimension fixed.
B <- 100
base_tejb <- teboot(model, B, m)$sample
dim(base_tejb)
reco_tejb <- tesmp(base_tejb, agg_order = m, res = res_vec, nn = "sntz", comb = "sar1")
reco_tejb # distribution object

# Extracts mean:
str(as_tevector(mean(reco_tejb), agg_order = m), give.attr = FALSE)
```

A parametric method assumes a normal distribution (Gaussian) to generate the incoherent sample set of forecasts.
```{r}
#| label: gauss-vn-old
#| include: false
#| eval: false
# Multi-step residuals
hres <- lapply(model, function(fit)
  lapply(1:frequency(fit$x), function(h) residuals(fit, type='response', h = h)))
hres <- Reduce("c", lapply(hres, arrange_hres))
# Re-arrenge multi-step residuals in a matrix form
mres <- res2matrix(hres, agg_order = m)

base_teg <- MASS::mvrnorm(n = B, mu = base_vec, Sigma = shrink_estim(mres))
str(base_teg, give.attr = FALSE)

reco_teg <- t(apply(base_teg, 1, terec, agg_order = m, res = res_vec, nn = "sntz",
                   comb = "sar1"))
str(reco_teg, give.attr = FALSE)
```

```{r}
#| label: gauss-vn

# Gaussian reconciled distribution
reco_teg_sar1 <- temvn(base = base_vec, agg_order = m, comb = "sar1", res = res_vec)
reco_teg_sar1 # distribution object

# Gaussian reconciled distribution with different base covariance matrix
# Multi-step residuals
hres <- lapply(model, function(fit)
  lapply(1:frequency(fit$x), function(h) residuals(fit, type='response', h = h)))
hres <- Reduce("c", lapply(hres, arrange_hres))
# Re-arrenge multi-step residuals in a matrix form
mres <- as_hstack_telayout(hres, agg_order = m)
cov_base <- shrink_estim(mres)

reco_teg <- temvn(base = base_vec, agg_order = m, comb = "sar1", 
                    res = res_vec, comb_base = cov_base)
reco_teg # distribution object

# Reconciled sample distribution starting from gaussian base forecasts
base_tes <- MASS::mvrnorm(n = B, mu = base_vec, Sigma = shrink_estim(mres))
reco_tes <- tesmp(base_tes, agg_order = m, res = res_vec, nn = "sntz", comb = "sar1")
reco_tes # distribution object
```

# References

::: {#refs}
:::

